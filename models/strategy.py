"""
AutoPPM Strategy Models
Database models for trading strategy management and execution
"""

from datetime import datetime
from typing import Optional, List, Dict, Any
from sqlalchemy import Column, Integer, String, DateTime, Float, BigInteger, Text, Boolean, JSON, Index
from sqlalchemy.ext.declarative import declarative_base
from pydantic import BaseModel, Field

# Import Base from database connection
from database.connection import Base


class Strategy(Base):
    """Trading strategy definition"""
    __tablename__ = "strategies"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(100), nullable=False, unique=True, index=True)
    description = Column(Text, nullable=True)
    version = Column(String(20), nullable=False, default="1.0.0")
    
    # Strategy Configuration
    strategy_type = Column(String(50), nullable=False, index=True)  # momentum, mean_reversion, multi_factor, custom
    category = Column(String(50), nullable=False, index=True)  # equity, options, futures, crypto
    risk_level = Column(String(20), nullable=False, default="moderate")  # low, moderate, high
    
    # Parameters and Configuration
    parameters = Column(JSON, nullable=True)  # Strategy-specific parameters
    default_parameters = Column(JSON, nullable=True)  # Default parameter values
    
    # Status and Control
    is_active = Column(Boolean, default=True, nullable=False, index=True)
    is_backtest_only = Column(Boolean, default=False, nullable=False)  # Paper trading only
    
    # Performance Metrics
    total_return = Column(Float, default=0.0)
    sharpe_ratio = Column(Float, default=0.0)
    max_drawdown = Column(Float, default=0.0)
    win_rate = Column(Float, default=0.0)
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_executed = Column(DateTime, nullable=True)
    
    __table_args__ = (
        Index('idx_strategy_type_category', 'strategy_type', 'category'),
        Index('idx_risk_level_active', 'risk_level', 'is_active'),
    )


class StrategyExecution(Base):
    """Strategy execution record"""
    __tablename__ = "strategy_executions"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    strategy_id = Column(Integer, nullable=False, index=True)
    user_id = Column(Integer, nullable=False, index=True)
    
    # Execution Details
    execution_type = Column(String(20), nullable=False, index=True)  # live, paper, backtest
    status = Column(String(20), nullable=False, default="running", index=True)  # running, stopped, completed, error
    
    # Configuration
    parameters = Column(JSON, nullable=True)  # Execution-specific parameters
    symbols = Column(JSON, nullable=True)  # List of symbols to trade
    
    # Performance Tracking
    start_value = Column(Float, nullable=True)
    current_value = Column(Float, nullable=True)
    total_pnl = Column(Float, default=0.0)
    day_pnl = Column(Float, default=0.0)
    
    # Risk Metrics
    current_drawdown = Column(Float, default=0.0)
    max_drawdown = Column(Float, default=0.0)
    var_95 = Column(Float, nullable=True)  # Value at Risk (95%)
    
    # Timestamps
    started_at = Column(DateTime, default=datetime.utcnow)
    stopped_at = Column(DateTime, nullable=True)
    last_updated = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    __table_args__ = (
        Index('idx_strategy_execution_status', 'strategy_id', 'status'),
        Index('idx_user_execution_status', 'user_id', 'status'),
        Index('idx_execution_type_status', 'execution_type', 'status'),
    )


class StrategySignal(Base):
    """Trading signals generated by strategies"""
    __tablename__ = "strategy_signals"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    strategy_execution_id = Column(Integer, nullable=False, index=True)
    symbol = Column(String(50), nullable=False, index=True)
    
    # Signal Details
    signal_type = Column(String(20), nullable=False, index=True)  # buy, sell, hold, close
    signal_strength = Column(Float, nullable=False, default=1.0)  # 0.0 to 1.0
    confidence = Column(Float, nullable=False, default=0.5)  # 0.0 to 1.0
    
    # Market Context
    price = Column(Float, nullable=False)
    volume = Column(BigInteger, nullable=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    
    # Signal Metadata
    reason = Column(Text, nullable=True)  # Why this signal was generated
    indicators = Column(JSON, nullable=True)  # Technical indicators used
    signal_metadata = Column(JSON, nullable=True)  # Additional signal data
    
    # Execution Status
    is_executed = Column(Boolean, default=False, index=True)
    executed_at = Column(DateTime, nullable=True)
    execution_price = Column(Float, nullable=True)
    
    __table_args__ = (
        Index('idx_symbol_timestamp', 'symbol', 'timestamp'),
        Index('idx_signal_type_executed', 'signal_type', 'is_executed'),
        Index('idx_execution_signals', 'strategy_execution_id', 'timestamp'),
    )


class StrategyPerformance(Base):
    """Strategy performance tracking"""
    __tablename__ = "strategy_performance"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    strategy_execution_id = Column(Integer, nullable=False, index=True)
    
    # Performance Metrics
    date = Column(DateTime, nullable=False, index=True)
    portfolio_value = Column(Float, nullable=False)
    daily_return = Column(Float, nullable=False)
    cumulative_return = Column(Float, nullable=False)
    
    # Risk Metrics
    volatility = Column(Float, nullable=True)
    sharpe_ratio = Column(Float, nullable=True)
    sortino_ratio = Column(Float, nullable=True)
    calmar_ratio = Column(Float, nullable=True)
    
    # Trading Metrics
    trades_count = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    avg_trade_return = Column(Float, nullable=True)
    
    # Drawdown Tracking
    peak_value = Column(Float, nullable=False)
    current_drawdown = Column(Float, nullable=False)
    max_drawdown = Column(Float, nullable=False)
    
    __table_args__ = (
        Index('idx_execution_date', 'strategy_execution_id', 'date'),
        Index('idx_date_performance', 'date', 'cumulative_return'),
    )


class StrategyBacktest(Base):
    """Strategy backtesting results"""
    __tablename__ = "strategy_backtests"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    strategy_id = Column(Integer, nullable=False, index=True)
    user_id = Column(Integer, nullable=False, index=True)
    
    # Backtest Configuration
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    initial_capital = Column(Float, nullable=False)
    symbols = Column(JSON, nullable=True)
    parameters = Column(JSON, nullable=True)
    
    # Results
    final_value = Column(Float, nullable=False)
    total_return = Column(Float, nullable=False)
    annualized_return = Column(Float, nullable=False)
    sharpe_ratio = Column(Float, nullable=True)
    max_drawdown = Column(Float, nullable=False)
    win_rate = Column(Float, nullable=True)
    
    # Risk Metrics
    volatility = Column(Float, nullable=True)
    var_95 = Column(Float, nullable=True)
    cvar_95 = Column(Float, nullable=True)  # Conditional Value at Risk
    sortino_ratio = Column(Float, nullable=True)
    
    # Trading Statistics
    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    avg_trade_return = Column(Float, nullable=True)
    profit_factor = Column(Float, nullable=True)
    
    # Status
    status = Column(String(20), nullable=False, default="running", index=True)  # running, completed, failed
    progress = Column(Float, default=0.0)  # 0.0 to 1.0
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    started_at = Column(DateTime, nullable=True)
    completed_at = Column(DateTime, nullable=True)
    
    __table_args__ = (
        Index('idx_strategy_backtest_status', 'strategy_id', 'status'),
        Index('idx_user_backtest_status', 'user_id', 'status'),
        Index('idx_date_range', 'start_date', 'end_date'),
    )


# Pydantic models for API requests/responses
class StrategyCreate(BaseModel):
    """Strategy creation request model"""
    name: str = Field(..., description="Strategy name")
    description: Optional[str] = Field(None, description="Strategy description")
    strategy_type: str = Field(..., description="Strategy type")
    category: str = Field(..., description="Strategy category")
    risk_level: str = Field(default="moderate", description="Risk level")
    parameters: Optional[Dict[str, Any]] = Field(None, description="Strategy parameters")
    default_parameters: Optional[Dict[str, Any]] = Field(None, description="Default parameters")


class StrategyResponse(BaseModel):
    """Strategy response model"""
    id: int
    name: str
    description: Optional[str]
    version: str
    strategy_type: str
    category: str
    risk_level: str
    is_active: bool
    is_backtest_only: bool
    total_return: float
    sharpe_ratio: float
    max_drawdown: float
    win_rate: float
    created_at: datetime
    last_executed: Optional[datetime] = None
    
    class Config:
        from_attributes = True


class StrategyExecutionCreate(BaseModel):
    """Strategy execution request model"""
    strategy_id: int = Field(..., description="Strategy ID to execute")
    execution_type: str = Field(..., description="Execution type: live, paper, backtest")
    parameters: Optional[Dict[str, Any]] = Field(None, description="Execution parameters")
    symbols: Optional[List[str]] = Field(None, description="Symbols to trade")


class StrategyExecutionResponse(BaseModel):
    """Strategy execution response model"""
    id: int
    strategy_id: int
    user_id: int
    execution_type: str
    status: str
    start_value: Optional[float]
    current_value: Optional[float]
    total_pnl: float
    day_pnl: float
    current_drawdown: float
    max_drawdown: float
    started_at: datetime
    last_updated: datetime
    
    class Config:
        from_attributes = True


class StrategySignalResponse(BaseModel):
    """Strategy signal response model"""
    id: int
    strategy_execution_id: int
    symbol: str
    signal_type: str
    signal_strength: float
    confidence: float
    price: float
    timestamp: datetime
    reason: Optional[str]
    is_executed: bool
    
    class Config:
        from_attributes = True


class StrategyPerformanceResponse(BaseModel):
    """Strategy performance response model"""
    id: int
    strategy_execution_id: int
    date: datetime
    portfolio_value: float
    daily_return: float
    cumulative_return: float
    volatility: Optional[float]
    sharpe_ratio: Optional[float]
    current_drawdown: float
    max_drawdown: float
    trades_count: int
    win_rate: Optional[float]
    
    class Config:
        from_attributes = True


class StrategyBacktestRequest(BaseModel):
    """Strategy backtest request model"""
    strategy_id: int = Field(..., description="Strategy ID to backtest")
    start_date: datetime = Field(..., description="Backtest start date")
    end_date: datetime = Field(..., description="Backtest end date")
    initial_capital: float = Field(..., description="Initial capital")
    symbols: Optional[List[str]] = Field(None, description="Symbols to backtest")
    parameters: Optional[Dict[str, Any]] = Field(None, description="Strategy parameters")


class StrategyBacktestResponse(BaseModel):
    """Strategy backtest response model"""
    id: int
    strategy_id: int
    start_date: datetime
    end_date: datetime
    initial_capital: float
    final_value: float
    total_return: float
    annualized_return: float
    sharpe_ratio: Optional[float]
    max_drawdown: float
    win_rate: Optional[float]
    volatility: Optional[float]
    total_trades: int
    status: str
    progress: float
    created_at: datetime
    
    class Config:
        from_attributes = True
